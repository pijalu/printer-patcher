name: Build and Release

on:
  push:
    branches:
      - main
      - master
      - 'release/**'
  pull_request:
    branches:
      - main
      - master

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache apt dependencies
      uses: actions/cache@v3
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-cache-${{ hashFiles('**/build-cross.sh') }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y golang

    - name: Install fyne
      run: go install fyne.io/tools/cmd/fyne@latest
    
    - name: Install fyne-cross
      run: go install github.com/fyne-io/fyne-cross@latest

    - name: Build for Linux, Windows, and Android
      run: ./build-cross.sh

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-windows-android-binaries
        path: |
          fyne-cross/dist/

  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Install fyne
      run: go install fyne.io/tools/cmd/fyne@latest

    - name: Build for macOS
      run: ./build.sh

    - name: Create macOS DMG
      run: |
        cd dist/current
        # Create a temporary directory for the DMG
        mkdir -p dmg_tmp
        cp -R "PrinterPatcher.app" dmg_tmp/
        
        # Create symbolic link to Applications
        ln -s /Applications dmg_tmp/Applications
        
        # Create the DMG
        hdiutil create -volname "PrinterPatcher" -srcfolder dmg_tmp -ov -format UDZO "../PrinterPatcher.dmg"
        
        # Clean up
        rm -rf dmg_tmp

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-binary
        path: |
          dist/current/
          dist/PrinterPatcher.dmg

  release:
    needs: [build-linux, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/heads/release/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Extract release info from branch name
      id: extract_release_info
      run: |
        # Extract branch name
        BRANCH_NAME="${GITHUB_REF#refs/heads/}"
        echo "Branch name: $BRANCH_NAME"
        
        # Extract printer name and version from branch name
        # Format: release/printername_version (e.g., release/artillery-m1-pro_1.0.11.0)
        if [[ $BRANCH_NAME =~ release/([^_]+)_(.*) ]]; then
          PRINTER_NAME="${BASH_REMATCH[1]}"
          VERSION="${BASH_REMATCH[2]}"
          echo "Printer name: $PRINTER_NAME"
          echo "Version: $VERSION"
          
          # Convert printer name to title case (replace hyphens with spaces and capitalize)
          PRINTER_TITLE=$(echo "$PRINTER_NAME" | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2))} 1')
          echo "Printer title: $PRINTER_TITLE"
          
          # Create release name
          RELEASE_NAME="$PRINTER_TITLE version $VERSION"
          echo "Release name: $RELEASE_NAME"
          
          echo "printer_name=$PRINTER_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        else
          echo "Branch name does not match expected format"
          exit 1
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.extract_release_info.outputs.version }}
        release_name: ${{ steps.extract_release_info.outputs.release_name }}
        draft: false
        prerelease: false

    - name: Upload Linux ARM64 Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./linux-windows-android-binaries/linux-arm64/PrinterPatcher.tar.xz
        asset_name: PrinterPatcher-linux-arm64.tar.xz
        asset_content_type: application/x-xz

    - name: Upload Linux AMD64 Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./linux-windows-android-binaries/linux-amd64/PrinterPatcher.tar.xz
        asset_name: PrinterPatcher-linux-amd64.tar.xz
        asset_content_type: application/x-xz

    - name: Upload Windows ARM64 Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./linux-windows-android-binaries/windows-arm64/PrinterPatcher.zip
        asset_name: PrinterPatcher-windows-arm64.zip
        asset_content_type: application/zip

    - name: Upload Windows AMD64 Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./linux-windows-android-binaries/windows-amd64/PrinterPatcher.zip
        asset_name: PrinterPatcher-windows-amd64.zip
        asset_content_type: application/zip

    - name: Upload Android ARM64 Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./linux-windows-android-binaries/android-arm64/PrinterPatcher.apk
        asset_name: PrinterPatcher-android-arm64.apk
        asset_content_type: application/vnd.android.package-archive

    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./macos-binary/PrinterPatcher.dmg
        asset_name: PrinterPatcher-macos.dmg
        asset_content_type: application/x-apple-diskimage